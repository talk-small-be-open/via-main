---

- hosts: all
  become_user: root
  become: true
  roles:
    - common
  vars_files:
    - ./site/via_{{instanceName}}.yml
    - vars_common.yml
  # vars:
  #   remoteUser: "{{via_user}}"
  #   stoneName: "{{default(via.stoneName,via.siteName)}}"
  environment:
    GS_HOME: /opt/GsDevKit_home
    PATH: /opt/GsDevKit_home/bin:{{ ansible_env.PATH }}
  
  tasks:
  - name: Set timezone to Switzerland
    timezone:
      name: Europe/Zurich
      
  - name: Add user group
    group:
      name: "{{remoteUser}}"

  - name: Add user
    user:
      name: "{{remoteUser}}"
      group: adm
      groups: "sudo, {{remoteUser}}"
      shell: /bin/bash

  # - name: Create /etc/via
  #   file:
  #     path: /etc/via
  #     state: directory
  #     owner: root
  #     group: root

  - name: Create users .ssh folder
    file:
      path: "/home/{{remoteUser}}/.ssh"
      state: directory
      owner: "{{remoteUser}}"
      group: "{{remoteUser}}"

  - name: Make sure SSH private key is installed (optional)
    when: via.sshPrivateKey is defined
    no_log: true
    copy:
      content: "{{via.sshPrivateKey}}"
      dest: "/home/{{remoteUser}}/.ssh/id_rsa"
      owner: "{{remoteUser}}"
      group: "{{remoteUser}}"
      mode: 0600

  - name: Copy SSH public key
    when: via.sshPrivateKey is defined
    copy:
      src: files/ssh/via_id.pub
      dest: "/home/{{remoteUser}}/.ssh/id_rsa.pub"
      owner: "{{remoteUser}}"
      group: "{{remoteUser}}"
      mode: 0644


# Ensure there is Swap memory (GemStone loves lots of memory)
  - name: Create swap file
    command: dd if=/dev/zero of={{swapFilePath}} bs=1024 count={{swapFileSizeMb}}k
             creates="{{swapFilePath}}"

  - name: Change swap file permissions
    file: path="{{swapFilePath}}" owner=root group=root mode=0600

  - name: "Check swap file type"
    command: file {{swapFilePath}}
    register: swapfile

  - name: Make swap file
    command: "sudo mkswap {{swapFilePath}}"
    when: swapfile.stdout.find('swap file') == -1

  - name: Write swap entry in fstab
    mount: name=none src={{swap_file_path}} fstype=swap opts=sw passno=0 dump=0 state=present

  - name: Mount swap
    command: "swapon {{swap_file_path}}"
    when: ansible_swaptotal_mb < 1

    
  #new as snap recommended - name: Add apt repo for certbot
  #   apt_repository:
  #     repo: ppa:certbot/certbot
      
  - name: apt packages update
    apt:
      update_cache: yes

  - name: Ensure early most basic apt packages for installation
    apt:
      name:
        - 'git'
        - 'file'
        - 'vim'
      state: present

    
  - name: Create basic installation folders
    file:
      path: "{{item}}"
      state: directory
      mode: 0755
      owner: '{{remoteUser}}'
      group: '{{remoteUser}}'
    with_items:
      - "{{via.installationPath}}"
#      - "{{via.installationPath}}/via_base"
#      - "{{via.installationPath}}/via_site"
      - "{{via.installationPath}}/install"
      - "{{via.installationPath}}/export"
      - "{{via.installationPath}}/log"

  - name: Create basic installation folders, shared with www-data
    file:
      path: "{{item}}"
      state: directory
      mode: "u+rwx,g+rxs,o+rx"
      owner: '{{remoteUser}}'
      group: 'www-data'
    with_items:
      - "{{via.installationPath}}/tmp"
      
  - name: Create GemStone GsDevKit_home folder
    file:
      path: "/opt/GsDevKit_home"
      state: directory
      mode: 0755
      owner: '{{remoteUser}}'
      group: '{{remoteUser}}'


  - include_tasks: tasks_git_update.yml    


  #
  # NGINX WEBSERVER
  #
  - name: nginx package
    apt: pkg=nginx
  # - name: nginx certbot plugin
  #   apt: pkg=python-certbot-nginx
  - name: User {{remoteUser}} is in group www-data (uploaded files permission)
    user:
      name: "{{remoteUser}}"
      append: true
      groups: www-data

    

  #
  # Postfix Mail
  #
  - name: postfix package
    apt: pkg=postfix

    
  - include_tasks: tasks_common.yml

      
  - name: Create Smalltalk Installer script
    template:
      src: files/install/installVia.st.j2
      dest: "{{via.installationPath}}/install/installVia.st"
      owner: '{{remoteUser}}'
      group: '{{remoteUser}}'
      mode: "u=rwx,g=rwx,o=rx"

  
  # Get SSL-Certificate
  - name: Ensure port 80 not in use by nginx
    when: via.useSsl
    service:
      name: nginx
      enabled: yes
      state: stopped
  - name: certbot get Certificates
    when: via.useSsl
    shell: certbot --standalone -n --agree-tos --email {{via.adminEmail}} --cert-name "via"  --domains "{{via.appDomains|join(',')}}" --domains "{{via.portalDomains|join(',')}}" --domains "{{via.redirectedDomains|join(',')}}" certonly
    args:
      creates: "/etc/letsencrypt/live/via/fullchain.pem"

  #
  # GemStone GsDevKit
  #
  - name: Get GsDevKit from github
    become_user: "{{remoteUser}}"
    git:
# TODO     repo: "https://github.com/GsDevKit/GsDevKit_home.git"
# includes Ubuntu 22.04:
      repo: "https://github.com/pdebruic/GsDevKit_home"
      dest: "/opt/GsDevKit_home"
      accept_hostkey: yes
      update: yes
      force: yes

  - name: GIVE user sudo permission without password. Will be removed later.
    copy:
      content: '{{remoteUser}} ALL=(ALL) NOPASSWD:ALL'
      dest: /etc/sudoers.d/temporaryforgemstone
      owner: root
      group: root
      
  - name: Run install script from GsDevKit
    become_user: "{{remoteUser}}"
    shell: installServerClient
    args:
      chdir: "/opt/GsDevKit_home"
      creates: "/opt/GsDevKit_home/bin/.gsdevkitSetup"

  - name: REMOVE user sudo permission without password.
    file:
      path: /etc/sudoers.d/temporaryforgemstone
      state: absent


    
  # - local_action: stat path=files/gemstone/GemStone64Bit3.4.5-x86_64.Linux.zip
  #   when: isOnLocalNetwork is defined
  #   register: gemstone_zip_file_local
  #   become: no
    
  # - name: Try to avoid big download and take GemStone locally
  #   when: isOnLocalNetwork is defined and isOnLocalNetwork == "true" and gemstone_zip_file_local.stat.exists 
  #   copy:
  #     src: "files/gemstone/GemStone64Bit3.4.5-x86_64.Linux.zip"
  #     dest: "/opt/GsDevKit_home/shared/downloads/zip/GemStone64Bit3.4.5-x86_64.Linux.zip"
  #     owner: "{{remoteUser}}"
  #     group: "{{remoteUser}}"
  #     mode: 0666
    
  - name: Create stone
    become_user: "{{remoteUser}}"
    ignore_errors: yes # Strange: Ansibles thinks that it fails, but it doesnt
    shell: 
#      warn: false
      cmd: "createStone {{stoneName}} {{via.gemStone.version}} > /tmp/stone_install.log 2>&1"
    args:
      chdir: "/opt/GsDevKit_home"
      creates: "/opt/GsDevKit_home/server/stones/{{stoneName}}"

  - name: Update with our own gem.conf for gems
    when: gemstone_is_installed is defined
    template:
      src: "files/gemstone/gem.conf.j2"
      dest: "/opt/GsDevKit_home/server/stones/{{stoneName}}/gem.conf"
      owner: "{{remoteUser}}"
      mode: 0644

  - name: Update with our own stone.conf for the stone
    when: gemstone_is_installed is defined
    template:
      src: "files/gemstone/gem.conf.j2"
      dest: "/opt/GsDevKit_home/server/stones/{{stoneName}}/{{stoneName}}.conf"
      owner: "{{remoteUser}}"
      mode: 0644
    
  - name: Create tODE client
    become_user: "{{remoteUser}}"
    shell: "createClient tode"
    args:
      chdir: "/opt/GsDevKit_home"
      creates: "/opt/GsDevKit_home/dev/clients/tode"

  - name: monit reload
    when: monitconfig1.changed or monitconfig2.changed
    shell: monit reload
    
  # - name: Flush Monticello cache
  #   become_user: "{{remoteUser}}"
  #   shell: "todeIt {{stoneName}} mr flush"

  - name: Copy our own STON file for the Seaside project
    copy:
      src: files/gemstone/Seaside3.ston
      dest: "/opt/GsDevKit_home/sys/local/server/projects/Seaside3.ston"
      owner: '{{remoteUser}}'
      mode: 0644


  # Needs to be done after createStone, strange
  - name: Restart stone
    become_user: "{{remoteUser}}"
    shell: "stopStone -b {{stoneName}} && startStone -b {{stoneName}}"
    args:
      chdir: "/opt/GsDevKit_home"
      

  - name: Check if Via is already installed
    stat: 
      path: "{{via.installationPath}}/install/INSTALLATION_IS_DONE.log"
    register: installation_is_done_file

  - set_fact:
      via_is_installed: True
    when: installation_is_done_file.stat.exists == true


    
  # See GemStone docs for Seaside at
  # https://github.com/GsDevKit/GsDevKit_home/blob/master/docs/gettingStartedWithSeaside.md
  # TODO: Es kommt aber die Meldung, dass es bereits installiert sei und nicht Ã¼berschrieben wurde. Ist dieser Schritt obsolete nach einem createStone?!
  # Versuch: Installieren mit --stone statt default --local
  - name: Install official GemStone-Seaside into tODE
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} project install --local Seaside3"
    args:
      chdir: "/opt/GsDevKit_home"
#      creates: "/opt/GsDevKit_home/sys/local/server/projects/Seaside32.ston"

  - name: Load official GemStone-Seaside into tODE
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    command:
      argv:
        - todeIt
        - "{{stoneName}}"
        - project
        - load
        - --loads="\`#('Base' 'Core' 'JSON' 'Email' 'Javascript' 'JQuery' 'JQueryUI' 'Production' 'Zinc' 'Tests')\`"
        - Seaside3


  - name: Mount Seaside in tODE
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} mount @/sys/stone/dirs/Seaside3/tode /home seaside"
    args:
      chdir: "/opt/GsDevKit_home"

  - name: Add VIA site project into tODE
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} project entry --baseline={{via.siteName}} --repo={{via.siteRepository.metacelloUrl}} /sys/local/server/projects"
    args:
      chdir: "/opt/GsDevKit_home"
      creates: "/opt/GsDevKit_home/sys/local/server/projects/{{via.siteName}}.ston"

  - name: git-clone VIA site project
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} project clone --https --local --checkout=master {{via.siteName}}"
    args:
      chdir: "/opt/GsDevKit_home"
#      creates: "/opt/GsDevKit_home/shared/repos/{{via.siteRepository.name}}"
      creates: "/opt/GsDevKit_home/shared/repos/via-site-*"
      
  - name: Update VIA site project (pull)
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} project pull {{via.siteName}}"

  - name: Update VIA site project (get)
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} project get {{via.siteName}}"
  
  - name: Load VIA site project
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    command:
      argv:
        - todeIt
        - "{{stoneName}}"
        - project
        - load
        - --loads="\`#('default')\`"
        - "{{via.siteName}}"

  - name: Register Servers in tODE
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "todeIt {{stoneName}} /home/seaside/gemServer --register=seaside{{item}} --type=zinc --port={{item}}"
    loop: "{{ via.gemPorts }}"
    args:
      chdir: "/opt/GsDevKit_home"

    
  - name: Install/Config VIA application
    when: via_is_installed is undefined
    become_user: "{{remoteUser}}"
    shell: "{{via.installationPath}}/via_base/server/executeSmalltalkScript.sh {{stoneName}} {{via.installationPath}}/install/installVia.st && touch INSTALLATION_IS_DONE.log"
    args:
      chdir: "{{via.installationPath}}/install"
      creates: "{{via.installationPath}}/install/INSTALLATION_IS_DONE.log"
    
  # - name: Start Servers in tODE
  #   become_user: "{{remoteUser}}"
  #   shell: "todeIt {{stoneName}} /home/seaside/gemServer --restart=seaside{{item}}"
  #   loop: "{{ via.gemPorts }}"
  #   args:
  #     chdir: "/opt/GsDevKit_home"


  - name: Reboot if first time install
    when: via_is_installed is undefined
    ansible.builtin.reboot:

  #
  # Start services
  #
  - name: Ensure haproxy is running
    service:
      name: haproxy
      state: restarted
  - name: Ensure nginx is running
    service:
      name: nginx
      state: restarted
  - name: ensure monit enabled on boot
    service:
      name: monit
      enabled: yes
      use: sysvinit
  - name: ensure monit restarted now
    service:
      name: monit
      state: restarted
      use: sysvinit

  - name: Wait for port 2812 to become open (Monit)
    wait_for:
      port: 2812
      sleep: 3
      timeout: 90

  - name: Start Servers in tODE with monit (wait couple seconds for monit to be there)
    shell: "monit -g via_gemstone_gems start"
     
  - include_tasks: tasks_common_end.yml
